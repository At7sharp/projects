# -*- coding: utf-8 -*-
"""6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1adRYZeaMfcSYNnFeV8zmBucBBmhE7-EK
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import os
import seaborn as sns
import matplotlib.pyplot as plt
from pathlib import *
import plotly.express as px
import numpy as np

# %matplotlib inline

path_mean = '/content/drive/MyDrive/Colab Notebooks/Karpov/lesson_6/avocado_mean.csv'
path_full = '/content/drive/MyDrive/Colab Notebooks/Karpov/lesson_6/avocado_full.csv'

avocado_mean = pd.read_csv(path_mean, index_col=0, squeeze=False, parse_dates=['Date'])
avocado_full = pd.read_csv(path_full, index_col=0, squeeze=False, parse_dates=['Date'])

AveragePrice = avocado_mean.rolling(50).mean()
AveragePrice.plot()

avocado_ewm = avocado_mean.ewm(span=2).mean()

avocado_ewm.plot()

avocado_full

organic_chicago = avocado_full.query('type == "organic" and region == "Chicago"')

ax_roll = organic_chicago.AveragePrice.rolling(4).mean()
ax_exp  = organic_chicago.AveragePrice.ewm(span=4).mean()

ax_exp = pd.DataFrame(ax_exp)
ax_roll = pd.DataFrame(ax_roll)
ax_exp

sns.set(
    font_scale=1,
    style="whitegrid",
    rc={'figure.figsize':(12,6)}
        )

sns.lineplot(data=ax_roll, color='red')
sns.lineplot(data=ax_exp)

# px.line(ax_exp, x=ax_exp.index, y='AveragePrice')
px.line(ax_roll, x=ax_roll.index, y='AveragePrice')

# üíÄ –°–ª–æ–∂–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ! üíÄ

# –î–∞–ª–µ–µ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –æ–ø–æ–∑–¥–∞–Ω–∏—è–º –≤ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫!

# –í —Ñ–∞–π–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º –∫–∞–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∫–µ–º –∏ –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É –∑–∞–∫–ª—é—á–∞–ª–∏ —Å–¥–µ–ª–∫–∏, –∞ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ ‚Äì –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ –ø—Ä–∏ —ç—Ç–æ–º –æ–ø–æ–∑–¥–∞–ª–∏. –ü—Ä–∏–º–µ—Ä —Å–∞–±—Å—ç—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:

# client_id	company_id	delay	revenue
# 0	2389	4240	-1 days -14:57:48.000000000	705436
# 1	7614	9544	-4 days -02:14:23.000000000	859266
# 2	2052	2427	-0 days -06:08:57.000000000	812416
# 3	9635	8054	-0 days -23:40:19.000000000	162312
# 4	8154	5503	-1 days -13:21:53.000000000	658844

# –ó–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é df. –î–∞–ª–µ–µ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ delay –≤ timedelta —Ñ–æ—Ä–º–∞—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ —Å—Ç–æ–ª–±–µ—Ü –Ω–µ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç—Å—è ‚Äì –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–±—Ä–∞—Ç—å -.

# NB! –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é df.

# –ú–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è:

# pd.to_timedelta()
# pd.Series.str

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Karpov/lesson_6/delays.csv')
df

df.delay = df.delay.str.replace('-', '')
df.delay = pd.to_timedelta(df.delay)

df['delay_categorical'] = pd.cut(df.delay, bins=3)

df

# üíÄ –°–ª–æ–∂–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ! üíÄ
# –†–∞–∑–±–∏–ª–æ—Å—å –∫–æ–Ω–µ—á–Ω–æ –Ω–µ–ø–ª–æ—Ö–æ, –Ω–æ —Ö–æ—á–µ—Ç—Å—è —á—É—Ç—å –±–æ–ª–µ–µ —Ü–µ–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è.
# –í —ç—Ç–æ–º –Ω–∞–º –ø–æ–º–æ–≥—É—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ pd.cut! –ü–µ—Ä–µ–∑–∞–¥–∞–π—Ç–µ –∫–æ–ª–æ–Ω–∫—É delay_categorical, —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω–µ–π –±—ã–ª–∏:

# 'less than 1 day' ‚Äì –≤—Ä–µ–º—è –æ—Ç 0 –¥–æ 1 –¥–Ω—è
# '1-2 days' ‚Äì –æ—Ç 1 –¥–æ 2 –¥–Ω–µ–π
# '2-3 days' ‚Äì –æ—Ç 2 –¥–æ 3 –¥–Ω–µ–π
#  'more than 3 days' ‚Äì –±–æ–ª—å—à–µ 3 –¥–Ω–µ–π

bins = pd.to_timedelta(['0d', '1d', '2d', '3d', '10000d'])
labels = ['less than 1 day', '1-2 days','2-3 days', 'more than 3 days']
df['delay_categorical'] = pd.cut(df.delay, bins=bins, labels=labels)

# –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–∞—Ä–ø–ª–æ—Ç —Å —Ç–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –∑–∞–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–¥–µ–ª–∫–∏.
# –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã —Å–Ω–∏–∑—É –±—ã–ª —Å–∞–º—ã–π —Ä–µ–¥–∫–∏–π, –∞ —Å–≤–µ—Ä—Ö—É ‚Äì —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π.

ax = df.groupby('delay_categorical', as_index=False) \
  .agg({'revenue': 'count'}) \
  .rename(columns={'revenue': 'frq'}) \
  .sort_values('frq')
px.bar(x=ax.delay_categorical, y=ax.frq)

ax

ads_data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Karpov/lesson_6/ads_data.csv', parse_dates=['date', 'time'])
ads_clients_data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Karpov/lesson_6/ads_clients_data.csv', parse_dates=['create_date', 'date'])

# –ü–æ—Å–º–æ—Ç—Ä–∏–º Na –∑–Ω–∞—á–µ–Ω–∏—è
ads_data.isna().sum()

ads_data

# –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ—Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–ø–æ–∫–∞–∑—ã –∏ –∫–ª–∏–∫–∏) –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º.
# –¢–æ–Ω–∫–∏–π –º–æ–º–µ–Ω—Ç: –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –∫–ª–∏–∫–∞–ª–∏—Å—å, –∏ –ø—Ä–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ –≤ —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –Ω–µ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫ —Å –∫–ª–∏–∫–∞–º–∏, 
# –∞ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –∏—Ö –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å. –û–∫—Ä—É–≥–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –¥–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.

# –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
total_ads=ads_data.ad_id.nunique()

ads_data.groupby(['ad_id', 'event'], as_index=False) \
        .agg({'platform': 'count'}) \
        .rename(columns={'platform': 'count'}) \
        .pivot(index='ad_id', columns='event', values='count') \
        .fillna(0) \
        .mean() \
        .round()

# –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π!
  # –ü–æ –æ—Å–∏ x ‚Äì —á–∏—Å–ª–æ –ø–æ–∫–∞–∑–æ–≤
  # –ü–æ –æ—Å–∏ y ‚Äì –¥–æ–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ç–∞–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞–º–∏
# –ü—Ä–æ–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä—É–π—Ç–µ —á–∏—Å–ª–æ –ø–æ–∫–∞–∑–æ–≤, –∞ –∑–∞—Ç–µ–º –ø–æ—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–Ω—è—Ç—å —Ñ–æ—Ä–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≥—Ä–∞—Ñ–∏–∫:

views = ads_data.groupby(['ad_id', 'event'], as_index=False) \
        .agg({'platform': 'count'}) \
        .rename(columns={'platform': 'count'}) \
        .pivot(index='ad_id', columns='event', values='count') \
        # .fillna(0)

views
log_views = np.log(views.view)

sns.distplot(log_views)

# –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–æ–≤ –Ω–∞ 1 –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (ad_id) –ø–æ –¥–Ω—è–º,
# –Ω–µ —É—á–∏—Ç—ã–≤–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –ø–æ–∫–∞–∑–æ–≤ (–æ–±—ã—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ).
# –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Å –æ–∫–Ω–æ–º –≤ 2 —ç–ª–µ–º–µ–Ω—Ç–∞.

# –í–æ–ø—Ä–æ—Å: –ö–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–∏–º –∑–∞ 6 –∞–ø—Ä–µ–ª—è 2019 –≥–æ–¥–∞? –û–∫—Ä—É–≥–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.

average_views_by_day = ads_data.query('event == "view"')\
  .groupby('date', as_index=False) \
  .agg({'ad_id': 'nunique', 'event':'count'})\
  .rename(columns={'ad_id':'uniq_ads', 'event':'event_number'})

average_views_by_day['average'] = average_views_by_day.event_number / average_views_by_day.uniq_ads

average_views_by_day['rolling'] = average_views_by_day.average.rolling(2).mean()

average_views_by_day

# –ó–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ –∏—Å—Ö–∏—Ç—Ä—è—Ç—å—Å—è –∫–∞–∫ –≤ 1-–æ–º –∑–∞–¥–∞–Ω–∏–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤. 
# –û—Ç–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, —Å–≥—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –∏ –¥–Ω—è–º –∏ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (`ad_id`) –≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (`date`). 
# –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –¥–Ω—è–º –∏ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è. –ü–æ—Ç–æ–º –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Å –ø–æ–º–æ—â—å—é `rolling`

# 2 –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
ads_data.query('event == "view"')\
  .groupby(['ad_id', 'date'], as_index=False)\
  .agg({'event':'count'})\
  .groupby('date')\
  .agg({'event':'mean'})\

# –ò –µ—â–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
ads_data.query('event == "view"')\
  .groupby(['date', 'ad_id']) \
  .agg({'event':'count'})\
  .groupby('date')\
  .agg({'event':'mean'})\

average_views_by_day.fillna(0)
average_views_by_day['diff'] = average_views_by_day['average'] - average_views_by_day['rolling']

average_views_by_day

# –ù—É –∞ —Ç–µ–ø–µ—Ä—å –Ω–∞–π–¥—ë–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º/–Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–∫–∞–∑–æ–≤) –≤ –¥–µ–Ω—å, 
# –≤ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –∑–∞–º–µ—á–µ–Ω–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–æ –º–æ–¥—É–ª—é –∞–Ω–æ–º–∞–ª–∏—è. 
# –¢–æ –µ—Å—Ç—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∏ –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º—ã –≤ —Ç–æ—Ç –¥–µ–Ω—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ 
# —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∏–ª–∏ –Ω–∞–∏–º–µ–Ω—å—à–∏–º —á–∏—Å–ª–æ–º –ø–æ–∫–∞–∑–æ–≤.–ü–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Ç–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ.

# –í –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏—Ç–µ id –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ.

ads_data.query('event == "view" and date == "2019-04-06"')\
  .groupby('ad_id', as_index=False) \
  .agg({'event':'count'})\
  .sort_values('event')
  # .rename(columns={'ad_id':'uniq_ads', 'event':'event_number'})

# –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏ –Ω–∞–π–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (create_date)
#  –∏ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º (date).

# –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.

ads_clients_data

ads = ads_data.merge(ads_clients_data, how='left', on='client_union_id')

ads.dtypes

ads['delta'] = ads['date_x'] - ads['create_date']
ads.head()

ads.groupby('client_union_id')\
  .agg({'delta':'min'})\
  .sort_values('delta')\
  .delta.mean()

# üíÄ –°–ª–æ–∂–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ! üíÄ

# –î–∞–≤–∞–π—Ç–µ –≤—ã—á–∏—Å–ª–∏–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π —Ä–µ–∫–ª–∞–º—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 365 –¥–Ω–µ–π.

# –ö–æ–Ω–≤–µ—Ä—Å–∏—è ‚Äì –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ —Ü–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (—Å–æ–∑–¥–∞–ª–∏ —Ä–µ–∫–ª–∞–º—É), –∫ –æ–±—â–µ–º—É —á–∏—Å–ª—É –∫–ª–∏–µ–Ω—Ç–æ–≤.
# –ù–∞–ø—Ä–∏–º–µ—Ä, 1000 –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–ª–∏ –∫–∞–±–∏–Ω–µ—Ç, –Ω–æ –ª–∏—à—å 50 –∏–∑ –Ω–∏—Ö –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Ä–µ–∫–ª–∞–º—É. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∫–æ–Ω–≤–µ—Ä—Å–∏—è –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ 5%

# –ß—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫, –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —Ä–µ–∫–ª–∞–º—ã —Å pd.Timedelta(365, unit='day'))

# –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –∏ –æ–∫—Ä—É–≥–ª–∏—Ç–µ –¥–æ —Å–æ—Ç—ã—Ö. –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:

total_clients = ads.client_union_id.nunique()
total_clients

ads['less_year'] = ads.delta < '365d'
# pd.to_timedelta(ads.delta)

ads.query('less_year')

ads_clients_data.client_union_id.nunique()

total_clients / 122078*100

# –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–æ–±—ä–µ–º –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü —Å–≤–æ–µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è (–æ—Ç 0 –¥–æ 30 –¥–Ω–µ–π).
# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –¥–Ω–µ–π –¥–ª—è –º–µ—Ç–æ–¥–∞ pd.cut() ‚Äì [0, 30, 90, 180, 365]. –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é pd.to_timedelta().

ads.head()

bins_by_month = pd.to_timedelta(['0d', '30d', '90d', '180d', '365d'])
labels_by_month = ['less than moth', '1-3 month','4-6 month', '7-12 month']
ads['delay_by_month'] = pd.cut(ads.delta, bins=bins_by_month, labels=labels_by_month)

ads.query('delay_by_month == "less than moth"')\
  .groupby('client_union_id', as_index=False)\
  .agg({'event':'count'})\
  .shape

ads.groupby(['delay_by_month'], as_index=False)\
  .agg({'client_union_id':'nunique'})\
  .rename(columns={'client_union_id':'uniqs'})\
  .sort_values('uniqs')

