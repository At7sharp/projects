# -*- coding: utf-8 -*-
"""adding_station_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TOyzWMMe6NZAKb1vGgetyNWPIY9PcmtR
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import datetime
import os
import requests
import json
import random

# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
import sys

"""Входные данные"""

substation  = 'rusgidro'          # Substation
trans       = 'AT-9'              # Transformer
trans_type  = '3-phase'             # 'group' for group of 1-phase \ '3-phase' for 3-phase one

# import_files directory
import_dir = '/content/drive/MyDrive/VFD_Analytics/data/rusgidro/a/'

# transformer nominal current, Amperes
nominal_current = 445

#@title Алгоритмы ШАОТов

# Алгоритм ПС Русгидро Волжск АТ-9
def shaot_volzhsk_at_9(temp, load):
  pump_power = 11
  fan_power = 2.2
  shaot_cons = pump_power * 1
  if (15 <= temp < 50) and (load < 0.4):
    shaot_cons = pump_power *3
  elif (temp >= 50) and (load < 0.4):
    shaot_cons = pump_power * 2 + fan_power * 2
  elif (temp >= 55) and (40 <= load < 0.8):
    shaot_cons = pump_power * 5 + fan_power * 4
  elif load >= 0.8:
    shaot_cons = pump_power * 5 + fan_power * 6
    
  return (shaot_cons)

# Алгоритм ПС Владимирская АТ-7
def shaot_vladimir_at_7(temp, load):
  pump_power = 11
  fan_power = 2.2
  shaot_cons = pump_power * 5
  if (temp > 25) and (load < 0.4):
    shaot_cons = pump_power * 5 + fan_power * 4
  elif (temp > 25) and (0.4 <= load < 0.8):
    shaot_cons = pump_power * 5 + fan_power * 8
  elif (temp > 25) and (load >= 0.8):
    shaot_cons = pump_power * 5 + fan_power * 10
    
  return (shaot_cons)

# Алгоритм ПС Нижегородская АТ-1 Фаза С
def shaot_nizhegorodskaya_at_1(temp, load):
  pump_power = 3
  fan_power = 2.2
  shaot_cons = pump_power * 3
  if 45 <= temp < 55:
    shaot_cons = pump_power * 3 + 2 * fan_power
  elif  temp >= 55:
    shaot_cons = pump_power * 3 + 4 * fan_power
  
  if load >= 80:
    shaot_cons = pump_power * 3 + 6 * fan_power

  return (shaot_cons)

# Алгоритм ПС Вятка АТ-3
def shaot_vyatka_at_3(temp, load):
  pump_power = 2.9
  fan_power = 2.2
  shaot_cons = (pump_power + 2 * fan_power) * 2
  if  40 <= load < 80:
    shaot_cons = (pump_power + 2 * fan_power) * 3
  elif load >= 80:
    shaot_cons = (pump_power + 2 * fan_power) * 4
  
  if temp >= 75:
    shaot_cons = (pump_power + 2 * fan_power) * 5
    
  return (shaot_cons)

# Алгоритм ПС Белый Раст АТ-1
def shaot_white_rast_at_1(temp, load):
  pump_power = 11
  start_pump_power = 3
  fan_power = 2.2
  shaot_cons = 0
  if temp >= 55 and load <= 0.5:
    shaot_cons = pump_power * 4 + fan_power * 8
  elif temp <= 55 and load >= 0.5:
    shaot_cons = pump_power * 4 + fan_power * 8
  elif temp >= 55 and load >= 0.5:
    shaot_cons = pump_power * 6 + fan_power * 12
  elif temp <= 55 and load >= 0.8:
    shaot_cons = pump_power * 6 + fan_power * 12
  elif temp >= 55 and load >= 0.8:
    shaot_cons = pump_power * 8 + fan_power * 16
  else:
    shaot_cons = pump_power * 2 + fan_power * 4 + start_pump_power * 2
  
  return (shaot_cons)


def shaot_white_rast_at_1_alt(temp, load):
  pump_power = 11
  fan_power = 2.2
  shaot_cons = 0
  if temp <= 25:
    shaot_cons = pump_power * 5
  elif temp > 25 and load <= 0.4:
    shaot_cons = pump_power * 5 + fan_power * 4
  elif temp > 25 and load > 0.4:
    shaot_cons = pump_power * 5 + fan_power * 8
  elif temp > 25 and load > 0.8:
    shaot_cons = pump_power * 5 + fan_power * 10
  else:
    shaot_cons = pump_power * 2

  return (shaot_cons)

#@title Функция для подготовки файлов для trans_type  = 'group' { form-width: "400px" }
def analyze_group(df):
    # Создание нового фрейма из нужных столбцов
    data = pd.DataFrame()
    data = df[['Дата',
               'Температура воздуха',
               'Температура масла Ф1',
               'I_vn_L1',
               'Зад. частота вент. L1',
               'Зад. частота насосов L1',
               'Потребляемая мощность СО_L1',
               'Температура масла Ф2',
               'I_vn_L2',
               'Зад. частота вент. L2',
               'Зад. частота насосов L2',
               'Потребляемая мощность СО_L2',
               'Температура масла Ф3',
               'I_vn_L3',
               'Зад. частота вент. L3',
               'Зад. частота насосов L3',
               'Потребляемая мощность СО_L3'
               ]]

    # Назначение новых имен для столбцов
    new_names = ['date',
                 'air_temp',
                 'oil_temp_ph_a',
                 'ph_a_cur',
                 'fan_frq_a',
                 'pump_frq_a',
                 'vfd_power_ph_a',
                 'oil_temp_ph_b',
                 'ph_b_cur',
                 'fan_frq_b',
                 'pump_frq_b',
                 'vfd_power_ph_b',
                 'oil_temp_ph_c',
                 'ph_c_cur',
                 'fan_frq_c',
                 'pump_frq_c',
                 'vfd_power_ph_c'
                 ]
    data.set_axis(new_names, axis='columns', inplace=True)



    # Вычисления значений и добавление в новые столбцы

    # Расчет нагрузки
    data = data.assign(load_a=lambda row: row.ph_a_cur / nominal_current,
                       load_b=lambda row: row.ph_b_cur / nominal_current,
                       load_c=lambda row: row.ph_c_cur / nominal_current
                       )
    # Расчет потребления ШАОТов по фазам, кВт
    data['shaot_power_ph_a'] = data.apply(lambda row: shaot_volzhsk_at_9(row['oil_temp_ph_a'], row['load_a']), axis=1)
    data['shaot_power_ph_b'] = data.apply(lambda row: shaot_volzhsk_at_9(row['oil_temp_ph_b'], row['load_b']), axis=1)
    data['shaot_power_ph_c'] = data.apply(lambda row: shaot_volzhsk_at_9(row['oil_temp_ph_c'], row['load_c']), axis=1)

    return(data)

#@title Функция для подготовки файлов для trans_type  = '3-phase' { form-width: "400px" }

def analyze_3ph(df):
    # Создание нового фрейма из нужных столбцов
    data = pd.DataFrame()
    data = df[['Дата',
               'Т воздуха',
               'Т масла',
               'Загрузка тр-ра %',
               'Зад. частота вент.',
               'Зад. частота насосов',
               'Общая потр. мощность',
               'I_вн',
               ]]

    # Назначение новых имен для столбцов
    new_names = ['date',
                 'air_temp',
                 'oil_temp',
                 'load',
                 'fan_frq',
                 'pump_frq',
                 'vfd_power',
                 'current_vn',
                 ]
    data.set_axis(new_names, axis='columns', inplace=True)

    # Вычисления значений и добавление в новые столбцы

    # # Расчет нагрузки
    # data = data.assign(load_a=lambda row: row.ph_a_cur / nominal_current,
    #                    load_b=lambda row: row.ph_b_cur / nominal_current,
    #                    load_c=lambda row: row.ph_c_cur / nominal_current
    #                    )
    # Расчет потребления ШАОТов по фазам, кВт
    data['shaot_power'] = data.apply(lambda row: shaot_volzhsk_at_9(row['oil_temp'], row['load']), axis=1)
    # data['shaot_power_ph_b'] = data.apply(lambda row: shaot_1(row['oil_temp_ph_b'], row['load_b']), axis=1)
    # data['shaot_power_ph_c'] = data.apply(lambda row: shaot_2(row['oil_temp_ph_c'], row['load_c']), axis=1)

    return(data)

# Получаем список файлов для импорта
fileslist = os.listdir(import_dir)
print(len(fileslist))

# Создаем пустые датафреймы
df_import = pd.DataFrame()
result_data = pd.DataFrame()

# Цикл для обработки файлов
filenummer = 0
for file in fileslist:
  os.chdir(import_dir)
  filenummer += 1
  print(filenummer,'/',len(fileslist), ' - Reading %s' %file)

  # Чтение файла
  df_import = pd.read_excel(file)

  # Отправка данных в функцию и получение результата.
  if trans_type == 'group':
    analyze_result = analyze_group(df_import)
  elif trans_type == '3-phase':
    analyze_result = analyze_3ph(df_import)

  result_data = pd.concat([result_data,analyze_result], axis=0, ignore_index=True)

result_data.to_csv('/content/drive/MyDrive/VFD_Analytics/results/RusGidro_AT_9_result.csv')

result_data

short_data = result_data[['date',
                          'air_temp',
                          'vfd_power_ph_a',
                          'vfd_power_ph_b',
                          'vfd_power_ph_c',
                          'shaot_power_ph_a',
                          'shaot_power_ph_b',
                          'shaot_power_ph_c'
                          ]]

short_data

short_data.to_excel('/content/drive/MyDrive/VFD_Analytics/results/Vladimir_AT_7_result_short.xlsx')

sns.set(
    font_scale=1,
    style="whitegrid",
    rc={'figure.figsize':(20,5)},
        )

sns.lineplot(data=graph, x='date', y='vfd_power_ph_a',legend=True)
sns.lineplot(data=graph, x='date', y='load', legend=True)

graph = result_data#.query('(date > "2021-05-01") and (0 < load < 100)')
graph

11.638*24*365

65/101.94888 * 100